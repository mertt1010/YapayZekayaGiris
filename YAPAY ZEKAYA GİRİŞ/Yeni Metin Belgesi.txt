import tensorflow as tf
import numpy as np
import random 
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# n1, n2, n3 değerlerini belirleyin
n1 = 0
n2 = 7
n3 = 9

# a, b, c, d değerlerini hesaplayın
a = (n1 + n2 + n3)
b = 10*(n1 + n2 + n3)
c = (n1 + n2 + n3)
d = (2*n1 - n2 + n3) 

print("a:", a, "b:", b, "c:", c, "d:", d)

# Tek periyot için sinyal üretme ve normalize etme
num_data_points = 200
x = np.linspace(0, 2*np.pi, num_data_points)
signal = a * np.cos(b*x + c) + d
scaler = MinMaxScaler()
normalized_signal = scaler.fit_transform(signal.reshape(-1, 1)).flatten()

# Modelin gürültüye duyarlılığını ayarlamak için noise_factor belirleyin
noise_factor = 0.1

input_list = []
output_list = []

# En az 200 veri seti oluşturma
for i in range(num_data_points):
    y = normalized_signal[i]
    # Gürültü ekleme
    y_noisy = y + noise_factor * np.random.randn()
    input_list.append(y_noisy)
    output_list.append(y)

input_array = np.array(input_list)
output_array = np.array(output_list)

# Veriyi eğitim ve test verisi olarak ayırma
X_train, X_test, y_train, y_test = train_test_split(input_array, output_array, test_size=0.2, random_state=42)

# Basit Model
model_simple = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(1,)),
    tf.keras.layers.Dense(1)
])

model_simple.compile(loss='mean_squared_error', optimizer='adam')

# Modeli eğitme
history_simple = model_simple.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), verbose=0)

# Karmaşık Model
model_complex = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(1,)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)
])

model_complex.compile(loss='mean_squared_error', optimizer='adam')

# Modeli eğitme
history_complex = model_complex.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test), verbose=0)

# Model tahminleri
def predict_and_plot(model, title):
    y_pred = model.predict(X_test)

    plt.figure(figsize=(10, 5))
    plt.scatter(X_test, y_test, color='blue', label='Gerçek Veri')
    plt.scatter(X_test, y_pred, color='red', label='Tahmin')
    plt.title(title)
    plt.legend()
    plt.show()

# Basit Model Tahminleri
predict_and_plot(model_simple, "Basit Model Tahminleri")

# Karmaşık Model Tahminleri
predict_and_plot(model_complex, "Karmaşık Model Tahminleri")

# Model eğitim süreçlerinin grafiği
def plot_loss(history, title):
    plt.figure(figsize=(10, 5))
    plt.plot(history.history['loss'], label='Eğitim Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title(title)
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()
    plt.show()

# Basit Model Eğitim Süreci
plot_loss(history_simple, "Basit Model Eğitim Süreci")

# Karmaşık Model Eğitim Süreci
plot_loss(history_complex, "Karmaşık Model Eğitim Süreci")
